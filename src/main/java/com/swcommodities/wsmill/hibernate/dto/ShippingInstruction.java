package com.swcommodities.wsmill.hibernate.dto;
// Generated Feb 18, 2014 3:38:53 PM by Hibernate Tools 3.2.1.GA

import static javax.persistence.GenerationType.IDENTITY;

import java.util.ArrayList;
import java.util.Comparator;
import java.util.Date;
import java.util.HashSet;
import java.util.List;
import java.util.Optional;
import java.util.Set;
import java.util.TreeSet;
import java.util.stream.Collectors;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.ElementCollection;
import javax.persistence.Embedded;
import javax.persistence.Entity;
import javax.persistence.EnumType;
import javax.persistence.Enumerated;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.ManyToMany;
import javax.persistence.ManyToOne;
import javax.persistence.MapKey;
import javax.persistence.OneToMany;
import javax.persistence.OneToOne;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.Transient;

import org.hibernate.annotations.Fetch;
import org.hibernate.annotations.FetchMode;
import org.springframework.data.domain.AbstractAggregateRoot;

import com.google.common.base.MoreObjects;
import com.google.common.collect.Sets;
import com.swcommodities.wsmill.domain.event.si.NewlyCreatedSIEvent;
import com.swcommodities.wsmill.domain.event.si.SICostUpdateObjectEvent;
import com.swcommodities.wsmill.domain.event.si.SIFinishedEvent;
import com.swcommodities.wsmill.domain.event.si.SIUpdatedEvent;
import com.swcommodities.wsmill.domain.event.si.SSApprovalStatusUpdatedEvent;
import com.swcommodities.wsmill.domain.event.si.SSSendingStatusUpdatedEvent;
import com.swcommodities.wsmill.domain.model.ClaimWeightNote;
import com.swcommodities.wsmill.domain.model.ContractWeightNote;
import com.swcommodities.wsmill.domain.model.FormattedWeightNote;
import com.swcommodities.wsmill.domain.model.RefAware;
import com.swcommodities.wsmill.domain.model.SICustomCost;
import com.swcommodities.wsmill.domain.model.ShippingCost;
import com.swcommodities.wsmill.domain.model.ShippingInstructionSummary;
import com.swcommodities.wsmill.domain.model.ShippingWeightNoteTotalInfo;
import com.swcommodities.wsmill.domain.model.WeightBasicFigure;
import com.swcommodities.wsmill.domain.model.WeightNoteBasicFigure;
import com.swcommodities.wsmill.domain.model.WeightNoteClaimAggegrate;
import com.swcommodities.wsmill.domain.model.WeightNoteComparingAggegrate;
import com.swcommodities.wsmill.domain.model.common.BaseIdAndNameImpl;
import com.swcommodities.wsmill.domain.model.exceptions.ActionNotPermitted;
import com.swcommodities.wsmill.domain.model.exceptions.DomainException;
import com.swcommodities.wsmill.domain.model.exceptions.NotEnoughInfoException;
import com.swcommodities.wsmill.domain.model.status.ApprovalStatus;
import com.swcommodities.wsmill.domain.model.status.CompletionStatus;
import com.swcommodities.wsmill.domain.model.status.RequestStatus;
import com.swcommodities.wsmill.domain.model.status.SendingStatus;
import com.swcommodities.wsmill.hibernate.dto.contract.OwnerInstruction;
import com.swcommodities.wsmill.utils.Constants;
import java.util.Map;
import javax.persistence.Version;
import org.springframework.util.Assert;

/**
 * ShippingInstruction generated by hbm2java
 */
@Entity
@Table(name = "shipping_instruction")
public class ShippingInstruction extends AbstractAggregateRoot implements java.io.Serializable, OwnerInstruction, RefAware {

    private Integer id;
    // user: update infor user
    private User user;
    private CompanyMaster companyMasterByClientId;
    private City city;
    private CompanyMaster companyMasterByShipperId;
    private PortMaster portMasterByDischargePortId;
    private CompanyMaster companyMasterByQualityCertId;

    private CompanyMaster companyMasterByWeightCertId;
    private CompanyMaster companyMasterByConsigneeId;
    private CompanyMaster companyMasterBySupplierId;
    private GradeMaster gradeMaster;
    private PackingMaster packingMaster;
    private ShippingLineMaster shippingLineMaster;
    private ShippingLineCompanyMaster shippingLineCompanyMaster;
    private PortMaster portMasterByLoadingPortId;
    private String refNumber;
    private String clientRef;
    private Date date;
    private String supplierRef;
    private Integer originId;
    private Integer qualityId;
    private Float contractQuantity;
    private Float quantity = 0F; //very important; not remove it
    private Date loadDate;
    private Date fromDate;
    private Date toDate;
    private String serviceContractNo;
    private String feederVessel;
    private Date feederEts;
    private Date feederEta;
    private String oceanVessel;
    private Date oceanEts;
    private Date oceanEta;
    private Byte containerStatus;
    private String marking;
    private String freight;
    private String lcNo;
    private Date lcDate;
    private String invoiceNo;
    private Date invoiceDate;
    private String blNumber;
    private Date blDate;
    private String remark;
    private String userRemark;
    private Byte status;
    // completion status is status
    private CompletionStatus completionStatus;
    private User completionStatusUser;
    private String log;
    private Set<CompanyMaster> notifyParties;
    private ShippingAdvice shippingAdvice;
    private String shipperRef;
    private String buyerRef;
    private CompanyMaster companyMasterByBuyerId;
    private PortMaster portMasterByTransitPortId;
    private GradeMaster gradeMasterByAllocationGradeId;
    private String icoNumber;
    private String bookingRef;
    private Date closingDate;
    private String closingTime;
    private String fullContReturn;
    private Float costToFob;
    private Set<SampleSent> sampleSents = new HashSet<>();
    private Set<Claim> claims = new HashSet<>();
    private Float totalCost;

    private Set<FileSent> referenceFileSents = new TreeSet<>();
    private Set<FileSent> internalReferenceFileSents = new TreeSet<>();
    private Set<WeightNote> weightNotes = new HashSet<>();
    private Set<WnrAllocation> allocations;
    private Double allocatedWeight;
    private Double pendingWeight;
    private Double deliverdWeight;
    private String sampleStatus;
    private Date sampleEta;
    private OriginMaster originMaster;
    private QualityMaster qualityMaster;
    private Boolean isCompletable;
    private CompanyMaster companyMasterByShippingLineNewId;
    
    private Byte requestStatus;
    private RequestStatus requestStatusEnum;
    private User requestUser;
    private Date requestDate;
    
    private Date updateCompletionDate;
    private String weightAndQualityCertificateStr;
    private String packingStr;
    
    private int shipmentStatus = InstructionStatus.ShipmentStatus.PENDING;
    private CompletionStatus shipmentStatusEnum = CompletionStatus.PENDING;
    private User shipmentStatusUpdateUser;
    private Date shipmentStatusUpdateDate;
    
    private String shippingMark;
    private List<ContractWeightNote> contractWeightNotes = new ArrayList<>();
    private ShippingCost shippingCost = new ShippingCost();
    
    private Integer version; 

    public ShippingInstruction() {
    }

    public ShippingInstruction(Integer id) {
        this.id = id;
    }
    
    public static ShippingInstruction fromRefNumber(String refNumber) {
        ShippingInstruction shippingInstruction = new ShippingInstruction();
        shippingInstruction.setRefNumber(refNumber);
        return shippingInstruction;
    }

    @Id
    @GeneratedValue(strategy = IDENTITY)
    @Column(name = "id", unique = true, nullable = false)
    public Integer getId() {
        return this.id;
    }

    public void setId(Integer id) {
        this.id = id;
    }

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "user_id")
    public User getUser() {
        return this.user;
    }

    public void setUser(User user) {
        this.user = user;
    }

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "client_id")
    @Override
    public CompanyMaster getCompanyMasterByClientId() {
        return this.companyMasterByClientId;
    }

    @Override
    public void setCompanyMasterByClientId(CompanyMaster companyMasterByClientId) {
        this.companyMasterByClientId = companyMasterByClientId;
    }

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "place_id")
    public City getCity() {
        return this.city;
    }

    public void setCity(City city) {
        this.city = city;
    }

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "shipper_id")
    public CompanyMaster getCompanyMasterByShipperId() {
        return this.companyMasterByShipperId;
    }

    public void setCompanyMasterByShipperId(CompanyMaster companyMasterByShipperId) {
        this.companyMasterByShipperId = companyMasterByShipperId;
    }

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "discharge_port_id")
    public PortMaster getPortMasterByDischargePortId() {
        return this.portMasterByDischargePortId;
    }

    public void setPortMasterByDischargePortId(PortMaster portMasterByDischargePortId) {
        this.portMasterByDischargePortId = portMasterByDischargePortId;
    }

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "quality_cert_id")
    public CompanyMaster getCompanyMasterByQualityCertId() {
        return this.companyMasterByQualityCertId;
    }

    public void setCompanyMasterByQualityCertId(CompanyMaster companyMasterByQualityCertId) {
        this.companyMasterByQualityCertId = companyMasterByQualityCertId;
    }

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "loading_port_id")
    public PortMaster getPortMasterByLoadingPortId() {
        return this.portMasterByLoadingPortId;
    }

    public void setPortMasterByLoadingPortId(PortMaster portMasterByLoadingPortId) {
        this.portMasterByLoadingPortId = portMasterByLoadingPortId;
    }

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "weight_cert_id")
    public CompanyMaster getCompanyMasterByWeightCertId() {
        return this.companyMasterByWeightCertId;
    }

    public void setCompanyMasterByWeightCertId(CompanyMaster companyMasterByWeightCertId) {
        this.companyMasterByWeightCertId = companyMasterByWeightCertId;
    }

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "consignee_id")
    public CompanyMaster getCompanyMasterByConsigneeId() {
        return this.companyMasterByConsigneeId;
    }

    public void setCompanyMasterByConsigneeId(CompanyMaster companyMasterByConsigneeId) {
        this.companyMasterByConsigneeId = companyMasterByConsigneeId;
    }

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "shipping_line_id_new")
    public CompanyMaster getCompanyMasterByShippingLineNewId() {
        return companyMasterByShippingLineNewId;
    }

    public ShippingInstruction setCompanyMasterByShippingLineNewId(CompanyMaster companyMasterByShippingLineNewId) {
        this.companyMasterByShippingLineNewId = companyMasterByShippingLineNewId;
        return this;
    }

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "supplier_id")
    public CompanyMaster getCompanyMasterBySupplierId() {
        return this.companyMasterBySupplierId;
    }

    public void setCompanyMasterBySupplierId(CompanyMaster companyMasterBySupplierId) {
        this.companyMasterBySupplierId = companyMasterBySupplierId;
    }

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "grade_id")
    public GradeMaster getGradeMaster() {
        return this.gradeMaster;
    }

    public void setGradeMaster(GradeMaster gradeMaster) {
        this.gradeMaster = gradeMaster;
    }

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "packing_id")
    public PackingMaster getPackingMaster() {
        return this.packingMaster;
    }

    public void setPackingMaster(PackingMaster packingMaster) {
        this.packingMaster = packingMaster;
    }

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "shipping_line_id")
    public ShippingLineMaster getShippingLineMaster() {
        return this.shippingLineMaster;
    }

    public void setShippingLineMaster(ShippingLineMaster shippingLineMaster) {
        this.shippingLineMaster = shippingLineMaster;
    }

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "shipping_line_company_master_id")
    public ShippingLineCompanyMaster getShippingLineCompanyMaster() {
        return shippingLineCompanyMaster;
    }

    public ShippingInstruction setShippingLineCompanyMaster(ShippingLineCompanyMaster shippingLineCompanyMaster) {
        this.shippingLineCompanyMaster = shippingLineCompanyMaster;
        return this;
    }

    @Column(name = "ref_number")
    public String getRefNumber() {
        return this.refNumber;
    }

    public void setRefNumber(String refNumber) {
        this.refNumber = refNumber;
    }

    @Column(name = "client_ref")
    public String getClientRef() {
        return this.clientRef;
    }

    public void setClientRef(String clientRef) {
        this.clientRef = clientRef;
    }

    @Temporal(TemporalType.TIMESTAMP)
    @Column(name = "date", length = 19)
    public Date getDate() {
        return this.date;
    }

    public void setDate(Date date) {
        this.date = date;
    }

    @Column(name = "supplier_ref")
    public String getSupplierRef() {
        return this.supplierRef;
    }

    public void setSupplierRef(String supplierRef) {
        this.supplierRef = supplierRef;
    }

    @Column(name = "origin_id")
    public Integer getOriginId() {
        return this.originId;
    }

    public void setOriginId(Integer originId) {
        this.originId = originId;
    }

    @Column(name = "quality_id")
    public Integer getQualityId() {
        return this.qualityId;
    }

    public void setQualityId(Integer qualityId) {
        this.qualityId = qualityId;
    }

    @Column(name = "contract_quantity", precision = 12, scale = 0)
    public Float getContractQuantity() {
        return this.contractQuantity;
    }

    public void setContractQuantity(Float contractQuantity) {
        this.contractQuantity = contractQuantity;
    }

    @Column(name = "quantity", precision = 12, scale = 0)
    public Float getQuantity() {
        return this.quantity;
    }

    public void setQuantity(Float quantity) {
        this.quantity = quantity;
    }

    @Temporal(TemporalType.DATE)
    @Column(name = "load_date", length = 10)
    public Date getLoadDate() {
        return this.loadDate;
    }

    public void setLoadDate(Date loadDate) {
        this.loadDate = loadDate;
    }

    @Temporal(TemporalType.DATE)
    @Column(name = "from_date", length = 10)
    public Date getFromDate() {
        return this.fromDate;
    }

    public void setFromDate(Date fromDate) {
        this.fromDate = fromDate;
    }

    @Temporal(TemporalType.DATE)
    @Column(name = "to_date", length = 10)
    public Date getToDate() {
        return this.toDate;
    }

    public void setToDate(Date toDate) {
        this.toDate = toDate;
    }

    @Column(name = "service_contract_no")
    public String getServiceContractNo() {
        return this.serviceContractNo;
    }

    public void setServiceContractNo(String serviceContractNo) {
        this.serviceContractNo = serviceContractNo;
    }

    @Column(name = "feeder_vessel")
    public String getFeederVessel() {
        return this.feederVessel;
    }

    public void setFeederVessel(String feederVessel) {
        this.feederVessel = feederVessel;
    }

    @Temporal(TemporalType.DATE)
    @Column(name = "feeder_ets", length = 10)
    public Date getFeederEts() {
        return this.feederEts;
    }

    public void setFeederEts(Date feederEts) {
        this.feederEts = feederEts;
    }

    @Temporal(TemporalType.DATE)
    @Column(name = "feeder_eta", length = 10)
    public Date getFeederEta() {
        return this.feederEta;
    }

    public void setFeederEta(Date feederEta) {
        this.feederEta = feederEta;
    }

    @Column(name = "ocean_vessel")
    public String getOceanVessel() {
        return this.oceanVessel;
    }

    public void setOceanVessel(String oceanVessel) {
        this.oceanVessel = oceanVessel;
    }

    @Temporal(TemporalType.DATE)
    @Column(name = "ocean_ets", length = 10)
    public Date getOceanEts() {
        return this.oceanEts;
    }

    public void setOceanEts(Date oceanEts) {
        this.oceanEts = oceanEts;
    }

    @Temporal(TemporalType.DATE)
    @Column(name = "ocean_eta", length = 10)
    public Date getOceanEta() {
        return this.oceanEta;
    }

    public void setOceanEta(Date oceanEta) {
        this.oceanEta = oceanEta;
    }

    @Column(name = "container_status")
    public Byte getContainerStatus() {
        return this.containerStatus;
    }

    public void setContainerStatus(Byte containerStatus) {
        this.containerStatus = containerStatus;
    }

    @Column(name = "marking", length = 65535)
    public String getMarking() {
        return this.marking;
    }

    public void setMarking(String marking) {
        this.marking = marking;
    }

    @Column(name = "freight")
    public String getFreight() {
        return this.freight;
    }

    public void setFreight(String freight) {
        this.freight = freight;
    }

    @Column(name = "lc_no")
    public String getLcNo() {
        return this.lcNo;
    }

    public void setLcNo(String lcNo) {
        this.lcNo = lcNo;
    }

    @Temporal(TemporalType.DATE)
    @Column(name = "lc_date", length = 10)
    public Date getLcDate() {
        return this.lcDate;
    }

    public void setLcDate(Date lcDate) {
        this.lcDate = lcDate;
    }

    @Column(name = "invoice_no")
    public String getInvoiceNo() {
        return this.invoiceNo;
    }

    public void setInvoiceNo(String invoiceNo) {
        this.invoiceNo = invoiceNo;
    }

    @Temporal(TemporalType.DATE)
    @Column(name = "invoice_date", length = 10)
    public Date getInvoiceDate() {
        return this.invoiceDate;
    }

    public void setInvoiceDate(Date invoiceDate) {
        this.invoiceDate = invoiceDate;
    }

    @Column(name = "bl_number")
    public String getBlNumber() {
        return this.blNumber;
    }

    public void setBlNumber(String blNumber) {
        this.blNumber = blNumber;
    }

    @Temporal(TemporalType.DATE)
    @Column(name = "bl_date", length = 10)
    public Date getBlDate() {
        return this.blDate;
    }

    public void setBlDate(Date blDate) {
        this.blDate = blDate;
    }

    @Column(name = "remark", length = 65535)
    public String getRemark() {
        return this.remark;
    }

    public void setRemark(String remark) {
        this.remark = remark;
    }

    @Column(name = "user_remark", length = 65535)
    public String getUserRemark() {
        return userRemark;
    }

    public void setUserRemark(String userRemark) {
        this.userRemark = userRemark;
    }

    @Column(name = "status")
    public Byte getStatus() {
        return this.status;
    }

    public void setStatus(Byte status) {
        this.status = status;
        try {
            this.completionStatus = CompletionStatus.values[Integer.valueOf(status)];
        } catch(Exception e) {
             
        }
    }

    @Column(name = "completion_status")
    @Enumerated(EnumType.STRING)
    public CompletionStatus getCompletionStatus() {
        if(completionStatus != null) {
            return completionStatus;
        }
        try {
            return CompletionStatus.values[Integer.valueOf(status)];
        } catch(Exception e) {
             
        }
        return null;
    }

    public void setCompletionStatus(CompletionStatus completionStatus) {
        this.completionStatus = completionStatus;
        if(completionStatus != null) {
            this.status = Byte.valueOf(String.valueOf(completionStatus.ordinal()));
        }
    }
    
    @Column(name = "log", length = 65535)
    public String getLog() {
        return this.log;
    }

    public void setLog(String log) {
        this.log = log;
    }

    @ManyToMany(fetch = FetchType.EAGER)
    @JoinTable(
            name = "shipping_instruction_notify_party",
            joinColumns = @JoinColumn(name = "ins_id"),
            inverseJoinColumns = @JoinColumn(name = "company_notify_party_id")
    )
    public Set<CompanyMaster> getNotifyParties() {
        if (this.notifyParties != null) {
            return this.notifyParties;
        }
        return new HashSet<>();
    }

    public void setNotifyParties(Set<CompanyMaster> notifyParties) {
        //this.notifyParties.clear();
        this.notifyParties = notifyParties;
    }

    public void addNotifyParty(CompanyMaster notifyParty) {
        if (this.notifyParties == null) {
            this.notifyParties = new HashSet<>();
        }
        this.notifyParties.add(notifyParty);
    }

    ;
    
    public BaseIdAndNameImpl addNotifyParty(int company) {
        this.notifyParties.add(new CompanyMaster(company));
        return new BaseIdAndNameImpl(company, "");
    }

    @OneToOne(mappedBy = "shippingInstruction", cascade = CascadeType.ALL)
    public ShippingAdvice getShippingAdvice() {
        return shippingAdvice;
    }

    public void setShippingAdvice(ShippingAdvice shippingAdvice) {
        this.shippingAdvice = shippingAdvice;
        if (shippingAdvice != null) {
            shippingAdvice.setShippingInstruction(this);
        }
    }

    @Column(name = "shipper_ref")
    public String getShipperRef() {
        return shipperRef;
    }

    public void setShipperRef(String shipperRef) {
        this.shipperRef = shipperRef;
    }

    @Column(name = "buyer_ref")
    public String getBuyerRef() {
        return buyerRef;
    }

    public void setBuyerRef(String buyerRef) {
        this.buyerRef = buyerRef;
    }

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "buyer_id")
    public CompanyMaster getCompanyMasterByBuyerId() {
        return companyMasterByBuyerId;
    }

    public void setCompanyMasterByBuyerId(CompanyMaster companyMasterByBuyerId) {
        this.companyMasterByBuyerId = companyMasterByBuyerId;
    }

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "transit_port_id")
    public PortMaster getPortMasterByTransitPortId() {
        return portMasterByTransitPortId;
    }

    public void setPortMasterByTransitPortId(PortMaster portMasterByTransitPortId) {
        this.portMasterByTransitPortId = portMasterByTransitPortId;
    }

    @Column(name = "ico_number")
    public String getIcoNumber() {
        return icoNumber;
    }

    public void setIcoNumber(String icoNumber) {
        this.icoNumber = icoNumber;
    }

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "allocation_grade_id")
    public GradeMaster getGradeMasterByAllocationGradeId() {
        return gradeMasterByAllocationGradeId;
    }

    public void setGradeMasterByAllocationGradeId(GradeMaster gradeMasterByAllocationGradeId) {
        this.gradeMasterByAllocationGradeId = gradeMasterByAllocationGradeId;
    }

    @Column(name = "booking_ref")
    public String getBookingRef() {
        return bookingRef;
    }

    public void setBookingRef(String bookingRef) {
        this.bookingRef = bookingRef;
    }

    @Temporal(TemporalType.DATE)
    @Column(name = "closing_date", length = 10)
    public Date getClosingDate() {
        return closingDate;
    }

    public void setClosingDate(Date closingDate) {
        this.closingDate = closingDate;
    }

    @Column(name = "closing_time")
    public String getClosingTime() {
        return closingTime;
    }

    public void setClosingTime(String closingTime) {
        this.closingTime = closingTime;
    }

    @Column(name = "full_cont_return")
    public String getFullContReturn() {
        return fullContReturn;
    }

    public void setFullContReturn(String fullContReturn) {
        this.fullContReturn = fullContReturn;
    }

    @Column(name = "cost_to_fob", precision = 12, scale = 0)
    public Float getCostToFob() {
        return costToFob;
    }

    public void setCostToFob(Float costToFob) {
        this.costToFob = costToFob;
    }

    @OneToMany(cascade = CascadeType.ALL, fetch = FetchType.LAZY, mappedBy = "shippingInstructionBySiId")
    public Set<SampleSent> getSampleSents() {
        return sampleSents;
    }

    public void setSampleSents(Set<SampleSent> sampleSents) {
        this.sampleSents = sampleSents;
    }

    public void addSampleSent(SampleSent sampleSent) {
        this.sampleSents.add(sampleSent);
        registerEvent(new SICostUpdateObjectEvent(this));
    }

    @OneToMany(cascade = CascadeType.ALL, fetch = FetchType.LAZY, mappedBy = "shippingInstructionBySiId")
    public Set<Claim> getClaims() {
        return claims;
    }

    public void setClaims(Set<Claim> claims) {
        this.claims = claims;
    }

    public void addClaim(Claim claim) throws ActionNotPermitted {
        if (! completed()) {
            throw new ActionNotPermitted("This instruction is not completed. You can not add claim");
        }
        claim.setShippingInstructionBySiId(this);
        getActiveWeightNotes().stream().forEachOrdered(wn -> claim.addClaimWeightNote(new ClaimWeightNote(wn.getId(),  0.0f, 0.0f)));
        this.claims.add(claim);
    }

    public float findCostForSampleSent(SampleSent ss) {
        if (ss.getCourierMaster() != null && shippingCost.getQuantity() != null && shippingCost.getQuantity() > 0) {
            return (float) ss.getCourierMaster().getCost() / shippingCost.getQuantity();
        }
        return 0;
    }
    
    public SampleSent findChildSampleSent(int sampleSentId) {
        return getSampleSents().stream().filter(ss -> sampleSentId == ss.getId()).findAny().get();
    }

    public SampleSent findChildSampleSent(String ssRef) {    	
        return getSampleSents().stream().filter(ss -> ssRef.equals(ss.getRefNumber())).findAny().get();
    }

    public Claim findChildClaim(String claimRef) {
        return getClaims().stream().filter(claim -> claimRef.equals(claim.getRefNumber())).findAny().get();
    }

    @Transient
    public String getClientSiCostListJson() {
        if (shippingCost != null) {
            return shippingCost.getClientSiCostListJson();
        }
        return "{}";
    }

    public void setClientSiCostListJson(String clientSiCostListJson) {
        this.shippingCost.setClientSiCostListJson(clientSiCostListJson);
    }

    @Embedded
    public ShippingCost getShippingCost() {
        return shippingCost;
    }

    public void setShippingCost(ShippingCost shippingCost) {
        this.shippingCost = shippingCost;
    }

    @Transient
    public String getCostNames() {
        if (shippingCost != null) {
            return shippingCost.getCostNames();
        }
        return "[]";
    }

    public ShippingInstruction setCostNames(String costNames) {
        this.shippingCost.setCostNames(costNames);
        return this;
    }

    @Column(name = "total_cost", precision = 12, scale = 0)
    public Float getTotalCost() {
        return totalCost;
    }

    public void setTotalCost(Float totalCost) {
        this.totalCost = totalCost;
    }

    @Transient
    public String getWeightQualityCertificate() {
        if (shippingCost != null) {
            return shippingCost.getCertificateCost();
        }
        return "";
    }

    public void setWeightQualityCertificate(String weightQualityCertificate) {
        this.shippingCost.setCertificateCost(weightQualityCertificate);
    }

    // intended to hotfix the wrong weight_quality_certificate, need some test to refactor
    @Transient
    public String getWeightQualityCertificateCompanyName() {
        if (getWeightQualityCertificate() == null) {
            return "";
        }
        String[] parts = getWeightQualityCertificate().split("__");
        return parts[parts.length - 1].toUpperCase();
    }

    // for hibernate
    private void setWeightQualityCertificateCompanyName(String name) {
    }

    @Transient
    public String getFumigation() {
        if (shippingCost != null) {
            return shippingCost.getFumigationDetailCost();
        }
        return "";
    }

    public void setFumigation(String fumigation) {
        this.shippingCost.setFumigationDetailCost(fumigation);
    }

    @Transient
    public String getFumigationCompanyName() {
        if (getFumigation() == null) {
            return "";
        }
        String[] parts = getFumigation().split("__");
        return parts[0].toUpperCase();
    }

    // for hibernate
    private void setFumigationCompanyName(String name) {
    }

    @OneToMany(cascade = CascadeType.PERSIST, fetch = FetchType.EAGER)
    @JoinTable(
            name = "shipping_reference_file_sent",
            joinColumns = @JoinColumn(name = "shipping_id"),
            inverseJoinColumns = @JoinColumn(name = "file_id")
    )
    public Set<FileSent> getReferenceFileSents() {
        return referenceFileSents;
    }

    public ShippingInstruction setReferenceFileSents(Set<FileSent> referenceFiles) {
        this.referenceFileSents = referenceFiles;
        return this;
    }

    public FileSent getReferenceOrInternalReferenceByLocalId(int localId) {
        Set<FileSent> all = new HashSet(this.getInternalReferenceFileSents());
        all.addAll(this.getReferenceFileSents());
        FileSent thisFile = all.stream().filter(fs -> fs.getId() == localId).findAny().get();
        return thisFile;
    }

    public FileSent updateFileSentRemindName(int localId, String remindName) {
        FileSent file = getReferenceOrInternalReferenceByLocalId(localId);
        file.setRemindName(remindName);
        return file;
    }

    public ShippingInstruction addReferenceFileSent(FileSent fileSent) {
        this.referenceFileSents.add(fileSent);
        return this;
    }

    @OneToMany(cascade = CascadeType.PERSIST, fetch = FetchType.EAGER)
    @JoinTable(
            name = "shipping_internal_reference_file_sent",
            joinColumns = @JoinColumn(name = "shipping_id"),
            inverseJoinColumns = @JoinColumn(name = "file_id")
    )
    public Set<FileSent> getInternalReferenceFileSents() {
        return internalReferenceFileSents;
    }

    public ShippingInstruction setInternalReferenceFileSents(Set<FileSent> internalReferenceFileSents) {
        this.internalReferenceFileSents = internalReferenceFileSents;
        return this;
    }

    public ShippingInstruction addInternalReferenceFileSent(FileSent fileSent) {
        this.internalReferenceFileSents.add(fileSent);
        return this;
    }

    @OneToMany(fetch = FetchType.LAZY, mappedBy = "shippingInstruction")
    public Set<WeightNote> getWeightNotes() {
        return weightNotes;
    }
    
    @Transient
    public Set<WeightNote> getActiveWeightNotes() {
        // dont get deleted wn
        return weightNotes.stream().filter(wn -> wn.getIsAvailable()).collect(Collectors.toSet());
    }

    public void setWeightNotes(Set<WeightNote> weightNotes) {
        this.weightNotes = weightNotes;
    }

    public void addWeightNote(WeightNote w) {
        this.weightNotes.add(w);
    }

    @OneToMany(fetch = FetchType.LAZY, mappedBy = "shippingInstruction")
    public Set<WnrAllocation> getAllocations() {
        return allocations;
    }

    public ShippingInstruction setAllocations(Set<WnrAllocation> allocations) {
        this.allocations = allocations;
        return this;
    }

    public Double getAllocatedWeight() {
        return allocatedWeight;
    }

    public ShippingInstruction setAllocatedWeight(Double allocatedWeight) {
        this.allocatedWeight = allocatedWeight;
        return this;
    }

    public Double getPendingWeight() {
        return pendingWeight;
    }

    public ShippingInstruction setPendingWeight(Double pendingWeight) {
        this.pendingWeight = pendingWeight;
        return this;
    }

    public Double getDeliverdWeight() {
        return deliverdWeight;
    }

    public ShippingInstruction setDeliverdWeight(Double deliverdWeight) {
        this.deliverdWeight = deliverdWeight;
        return this;
    }

    @Transient
    public String getSampleStatus() {
        Set<SampleSent> sampleSents = getSampleSents();
        String result = "N/A";
        if (sampleSents.size() == 0) {
            result = "N/A";
        } else {
            for (SampleSent ss : sampleSents) {
                if (ss.getApprovalStatusEnum().equals(ApprovalStatus.PENDING)) {
                    result = "Pending";
                    break;
                }
            }
            for (SampleSent ss : sampleSents) {
                if (ss.getApprovalStatusEnum().equals(ApprovalStatus.APPROVED)) {
                    result = "Approved";
                    break;
                }
            }
        }
        return result;
    }

    public void setSampleStatus(String sampleStatus) {}

    @Transient
    public Date getSampleEta() {
        return sampleEta;
    }

    public void setSampleEta(Date sampleEta) {
        this.sampleEta = sampleEta;
    }

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "new_quality_id")
    public QualityMaster getQualityMaster() {
        return qualityMaster;
    }

    public ShippingInstruction setQualityMaster(QualityMaster qualityMaster) {
        this.qualityMaster = qualityMaster;
        return this;
    }

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "new_origin_id")
    public OriginMaster getOriginMaster() {
        return originMaster;
    }

    public ShippingInstruction setOriginMaster(OriginMaster originMaster) {
        this.originMaster = originMaster;
        return this;
    }

    @Column(name = "request_status")
    public Byte getRequestStatus() {
        return requestStatus;
    }

    public ShippingInstruction setRequestStatus(Byte requestStatus) {
        this.requestStatus = requestStatus;
        return this;
    }

    @Enumerated(EnumType.STRING)
    public RequestStatus getRequestStatusEnum() {
        return requestStatusEnum;
    }

    public void setRequestStatusEnum(RequestStatus requestStatusEnum) {
        this.requestStatusEnum = requestStatusEnum;
    }

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "request_user_id")
    public User getRequestUser() {
        return requestUser;
    }

    public ShippingInstruction setRequestUser(User requestUser) {
        this.requestUser = requestUser;
        return this;
    }

    @Temporal(TemporalType.TIMESTAMP)
    @Column(name = "request_date", length = 19)
    public Date getRequestDate() {
        return requestDate;
    }

    public ShippingInstruction setRequestDate(Date requestDate) {
        this.requestDate = requestDate;
        return this;
    }

    @Temporal(TemporalType.TIMESTAMP)
    @Column(name = "update_completion_date", length = 19)
    public Date getUpdateCompletionDate() {
        return updateCompletionDate;
    }

    public ShippingInstruction setUpdateCompletionDate(Date updateCompletionDate) {
        this.updateCompletionDate = updateCompletionDate;
        return this;
    }

    @Transient
    public Boolean isAllWeghtNoteCompleted() {
        Boolean completable = true;
        if (getWeightNotes() != null) {
            Set<WeightNote> wns = getWeightNotes();
            if (wns.size() != 0) {
                for (WeightNote wn : wns) {
                    if (wn.getStatus().equals(Constants.PENDING)) {
                        completable = false;
                    }
                }
            }
        }
        return completable;
    }
    
    @Transient
    public boolean isWeightNoteGeneratedAlready() {
        return getActiveWeightNotes().size() == getContractWeightNotes().size();
    }

    public ShippingInstruction setCompletable(Boolean completable) {
        isCompletable = completable;
        return this;
    }

    @Transient
    public String getWeightAndQualityCertificateStr() {
        return weightAndQualityCertificateStr;
    }

    public void setWeightAndQualityCertificateStr(String weightAndQualityCertificateStr) {
        this.weightAndQualityCertificateStr = weightAndQualityCertificateStr;
    }

    @Column(name = "packing_string")
    public String getPackingStr() {
        return packingStr;
    }

    public void setPackingStr(String packingStr) {
        this.packingStr = packingStr;
    }

    public int getShipmentStatus() {
        return shipmentStatus;
    }

    public void setShipmentStatus(int shipmentStatus) {
        this.shipmentStatus = shipmentStatus;
        try {
            this.shipmentStatusEnum = CompletionStatus.values[shipmentStatus];
        } catch(Exception e) {}
    }

    @Column(name = "shipment_status_enum")
    @Enumerated(EnumType.STRING)
    public CompletionStatus getShipmentStatusEnum() {
        return shipmentStatusEnum;
    }
    
    
    @ManyToOne(fetch=FetchType.LAZY)
    @JoinColumn(name="completion_status_user")
    public User getCompletionStatusUser() {
		return completionStatusUser;
	}

	public void setCompletionStatusUser(User completionStatusUser) {
		this.completionStatusUser = completionStatusUser;
	}

	public void setShipmentStatusEnum(CompletionStatus shipmentStatusEnum) {
        this.shipmentStatusEnum = shipmentStatusEnum;
        
    }

    public void updateShipmentStatus(CompletionStatus shipmentStatus, User shipmentStatusUpdateUser) throws ActionNotPermitted {
        if (completed()) {
            throw new ActionNotPermitted("This instruction is already completed. You can not change shipment status");
        }
        if(! isAllWeghtNoteCompleted()) {
            throw new ActionNotPermitted("Some weight note might not be completed; Complete it before continue");
        }
        this.setShipmentStatusEnum(shipmentStatus);
        this.shipmentStatusUpdateUser = shipmentStatusUpdateUser;
        this.shipmentStatusUpdateDate = new Date();
        registerEvent(new SIUpdatedEvent(refNumber));
    }
    
    public void updateRequestStatus(RequestStatus status, User requestUser) throws ActionNotPermitted {
        if (completed()) {
            throw new ActionNotPermitted("This instruction is already completed. You can not change request status");
        }
        this.requestStatusEnum = status;
        this.requestUser = requestUser;
        this.requestDate = new Date();
        registerEvent(new SIUpdatedEvent(refNumber));
    }
    
    public void updateCompletionStatus(CompletionStatus completionStatus, User user) throws ActionNotPermitted {
        if(completionStatus.equals(CompletionStatus.COMPLETED) && getShipmentStatusEnum().equals(CompletionStatus.PENDING)) {
            throw new ActionNotPermitted("Please complete shipment status before completing the SI");
        }
        this.setCompletionStatus(completionStatus);
        this.setCompletionStatusUser(user);
        this.updateCompletionDate = new Date();
        registerEvent(new SIUpdatedEvent(refNumber));
        if(completed()) {
            registerEvent(new SIFinishedEvent(id, user.getId()));
        }
    }

    @ManyToOne(fetch = FetchType.LAZY)
    public User getShipmentStatusUpdateUser() {
        return shipmentStatusUpdateUser;
    }

    public void setShipmentStatusUpdateUser(User shipmentStatusUpdateUser) {
        this.shipmentStatusUpdateUser = shipmentStatusUpdateUser;
    }

    public Date getShipmentStatusUpdateDate() {
        return shipmentStatusUpdateDate;
    }

    public void setShipmentStatusUpdateDate(Date shipmentStatusUpdateDate) {
        this.shipmentStatusUpdateDate = shipmentStatusUpdateDate;
    }

    public boolean completed() {
        return completionStatus.equals(CompletionStatus.COMPLETED);
    }
    
    public boolean canPublishFinishEvent() {
        return completed();
    }

    public Boolean getIsCompletable() {
        return isCompletable;
    }

    public void setIsCompletable(Boolean isCompletable) {
        this.isCompletable = isCompletable;
    }

    @Column(name = "shipping_mark", length = 2000)
    public String getShippingMark() {
        return shippingMark;
    }

    public void setShippingMark(String shippingMark) {
        this.shippingMark = shippingMark;
    }

    @Version
    public Integer getVersion() {
        return version;
    }

    // for hibernate
    public void setVersion(Integer version) {
        this.version = version;
    }

    @Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + ((refNumber == null) ? 0 : refNumber.hashCode());
		return result;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		ShippingInstruction other = (ShippingInstruction) obj;
		if (refNumber == null) {
			if (other.refNumber != null)
				return false;
		} else if (!refNumber.equals(other.refNumber))
			return false;
		return true;
	}

	@Override
	public String toString() {
		return "ShippingInstruction [refNumber=" + refNumber + "]";
	}

	public ShippingInstructionSummary exportSummary() {
        return new ShippingInstructionSummary();
    }

    @ElementCollection(targetClass = ContractWeightNote.class, fetch = FetchType.EAGER)
    @JoinTable(name = "shipping_contract_weight_note", joinColumns = @JoinColumn(name = "shipping_id"))
    @MapKey(name = "id")
    @Column(name = "contractWeightNotes")
    @Fetch(FetchMode.SELECT)
    public List<ContractWeightNote> getContractWeightNotes() {
        if (contractWeightNotes == null) {
            contractWeightNotes = new ArrayList<>();
        }
        contractWeightNotes.sort(Comparator.comparing(ContractWeightNote::getWeightNoteId));
        return contractWeightNotes;
    }

    public void setContractWeightNotes(List<ContractWeightNote> contractWeightNotes) {
        this.contractWeightNotes = contractWeightNotes;
    }

    public void generateContractWeightNote() {
        Set<Integer> _weightNoteIds = getActiveWeightNotes().stream().map(WeightNote::getId).collect(Collectors.toSet());
        Set<Integer> _contractWeightNoteIds = getContractWeightNotes().stream().map(ContractWeightNote::getWeightNoteId).collect(Collectors.toSet());
        Set<Integer> shouldNotExists = Sets.difference(_contractWeightNoteIds, _weightNoteIds);
        Set<Integer> shouldExists = Sets.difference(_weightNoteIds, _contractWeightNoteIds);
        getContractWeightNotes().removeIf(wnContract -> shouldNotExists.contains(wnContract.getWeightNoteId()));
        for (int wnId : shouldExists) {
            for (WeightNote weightNote : getActiveWeightNotes()) {
                if (wnId == weightNote.getId()) {
                    getContractWeightNotes().add(new ContractWeightNote(
                            MoreObjects.firstNonNull(weightNote.getGrossWeight(), 0F),
                            MoreObjects.firstNonNull(weightNote.getTareWeight(), 0F),
                            weightNote.getId(), weightNote.getRefNumber()));
                }
            }
        }
    }

    public void updateContractWeightNote(ContractWeightNote contractWeightNote) {
        List<ContractWeightNote> _contractWeightNotes = getContractWeightNotes();
        for (ContractWeightNote wn : _contractWeightNotes) {
        //	System.out.println(wn.getRefNumber() + "---" + contractWeightNote.getRefNumber());
            if (wn.getRefNumber() != null && wn.getRefNumber().equals(contractWeightNote.getRefNumber()) || wn.getWeightNoteId().equals(contractWeightNote.getWeightNoteId())) {
                getContractWeightNotes().remove(wn);
                getContractWeightNotes().add(contractWeightNote);
                break;
            }
        }
    }

    public void addContractWeightNote(ContractWeightNote contractWeightNote) {
        contractWeightNotes.add(contractWeightNote);
    }

    @Transient
    public List<FormattedWeightNote> getFormattedWeightNotes() {
        if (getContractWeightNotes().isEmpty()) {
            return new ArrayList<>();
        }
        List<FormattedWeightNote> list = new ArrayList<>();
        for (ContractWeightNote cwn : getContractWeightNotes()) {
            for (WeightNote wn : getActiveWeightNotes()) {
                if (cwn.getWeightNoteId().equals(wn.getId())) {
                    list.add(new FormattedWeightNote(wn, cwn));
                }
            }
        }
        return list;
    }

    @Transient
    public List<ContractWeightNote> getContractWeightNotesWithAddtionalInfo() {
        if (getContractWeightNotes().isEmpty()) {
            return new ArrayList<>();
        }
        for (ContractWeightNote cwn : getContractWeightNotes()) {
            for (WeightNote wn : getActiveWeightNotes()) {
                if (cwn.getWeightNoteId().equals(wn.getId())) {
                    cwn.setPacking(Optional.ofNullable(wn.getPackingMaster()).map(pmo -> pmo.getName()).orElse(""));
                    cwn.setSealNo(wn.getSealNo());
                    cwn.setContainerNo(wn.getContainerNo());
                }
            }
        }
        return getContractWeightNotes();
    }

    @Transient
    public List<FormattedWeightNote> getFormattedWeightNotesOrThrows() {
        if (getActiveWeightNotes().size() != getContractWeightNotes().size()) {
            throw new NotEnoughInfoException("It seems that the contract wns are not generated.");
        }
        return getFormattedWeightNotes();
    }

    @Transient
    public ShippingWeightNoteTotalInfo getShippingWeightNoteTotalInfo() {
        ShippingWeightNoteTotalInfo info = new ShippingWeightNoteTotalInfo();
        Set<ContractWeightNote> wns = getContractWeightNotes().stream().collect(Collectors.toSet());
        info.setGrossWeight(wns.stream().mapToDouble(x -> x.getContractGrossWeight()).sum());
        info.setTareWeight(wns.stream().mapToDouble(x -> x.getContractTareWeight()).sum());
        info.setNetWeight(info.getGrossWeight() - info.getTareWeight());
        info.setVgmWeight(wns.stream().mapToDouble(x -> x.getVgmWeight()).sum());
        info.setMaxGrossContainerWeight(wns.stream().mapToDouble(x -> x.getMaxGrossContainerWeight()).sum());
        info.setEmptyContainerWeight(wns.stream().mapToDouble(x -> x.getEmptyContainerWeight()).sum());
        info.setCartonWeight(wns.stream().mapToDouble(x -> x.getCartonWeight()).sum());
        info.setDraftWeight(wns.stream().mapToDouble(x -> x.getDraftWeight()).sum());
        info.setDryBagWeight(wns.stream().mapToDouble(x -> x.getDryBagWeight()).sum());
        info.setPalletWeight(wns.stream().mapToDouble(x -> x.getPalletWeight()).sum());
        return info;
    }

    @Transient
    public WeightNoteComparingAggegrate getAdviceInfo() {
        WeightNoteComparingAggegrate aggegrate = new WeightNoteComparingAggegrate();
        Set<WeightNote> wns = getActiveWeightNotes();
        // temporary fix [TODO] cache the quanity on the wn
        wns.forEach(wn -> {
            wn.setGrossWeight((float) wn.getTotalGrossWeight());
            wn.setTareWeight((float) wn.getTotalTareWeight());
            wn.setNoOfBags(wn.getTotalNoOfBags());
            wn.setNetWeight(wn.getGrossWeight() - wn.getTareWeight());

        });
        List<WeightNoteBasicFigure> weightNotes = new ArrayList<>(wns);
        List<WeightNoteBasicFigure> contractWeightNotes = new ArrayList<>(getContractWeightNotesWithAddtionalInfo());
        aggegrate.setWeightNotes(weightNotes);
        aggegrate.setContractWeightNotes(contractWeightNotes);
        aggegrate.setTotalWeightNotes(WeightNoteComparingAggegrate.total(weightNotes));
        aggegrate.setTotalContractWeightNotes(WeightNoteComparingAggegrate.total(contractWeightNotes));
        aggegrate.setDiff(WeightNoteComparingAggegrate.diff(aggegrate.getTotalWeightNotes(), aggegrate.getTotalContractWeightNotes()));
        return aggegrate;
    }
    
    @Transient
    public WeightNoteComparingAggegrate getAdviceInfoWithModifyingTheTareWeightEqualToShipWeightDetails() throws DomainException {
        WeightNoteComparingAggegrate adviceAggegrate = getAdviceInfo();
        if(adviceAggegrate.getContractWeightNotes().size() != adviceAggegrate.getWeightNotes().size()) {
            throw new DomainException("No loading report presented. Please create loading report before making claim");
        }
        List<WeightNoteBasicFigure> internalShipWeightDetail = adviceAggegrate.getWeightNotes();
        List<WeightNoteBasicFigure> internalShipWeightDetailModified = internalShipWeightDetail.stream().map(swn -> {
            for(WeightNoteBasicFigure wn: adviceAggegrate.getContractWeightNotes()) {
                if(swn.getWeightNoteId().equals(wn.getId())) {
                    return swn.assignTareWeight(wn);
                }
            }
            return null;
        }).collect(Collectors.toList());
        adviceAggegrate.setWeightNotes(internalShipWeightDetailModified);
        return adviceAggegrate;
        
    }
    
    
    public WeightNoteClaimAggegrate findClaimAggegrate(String claimRef) throws DomainException {
        Claim claim = findChildClaim(claimRef);
        WeightNoteComparingAggegrate adviceAggegrate = getAdviceInfoWithModifyingTheTareWeightEqualToShipWeightDetails();       
        Map<Integer, ClaimWeightNote> claimMap = claim.getClaimWeightNotes();
        List<WeightNoteBasicFigure> shipWeightDetail = adviceAggegrate.getContractWeightNotes();
        List<WeightBasicFigure> arrivalWeightDetail = new ArrayList<>(claimMap.values());
        List<WeightBasicFigure> weightLossDetail = shipWeightDetail.stream().map(swn -> {
            if(claimMap.get(swn.getId()) != null) {
                return swn.basicFigureDiff(claimMap.get(swn.getId()));
            }
            return null;
        }).collect(Collectors.toList());
        List<WeightNoteBasicFigure> internalShipWeightDetail = adviceAggegrate.getWeightNotes();      
        List<WeightBasicFigure> internalWeightLossDetail = internalShipWeightDetail.stream().map(swn -> {
            if(claimMap.get(swn.getId()) != null) {
                return swn.basicFigureDiff(claimMap.get(swn.getId()));
            }
            return null;
        }).collect(Collectors.toList());
        
        // total
        WeightNoteBasicFigure totalShipWeightDetail = shipWeightDetail.stream().collect(Collectors.reducing((u, v) -> u.weightNoteBasicFigureAdd(v))).map(x -> x).orElse(null);
        WeightBasicFigure totalArrivalWeightDetail = arrivalWeightDetail.stream().collect(Collectors.reducing((u, v) -> u.basicFigureAdd(v))).map(x -> x).orElse(null);
        WeightBasicFigure totalWeightLossDetail = weightLossDetail.stream().collect(Collectors.reducing((u, v) -> u.basicFigureAdd(v))).map(x -> x).orElse(null);
        WeightNoteBasicFigure totalInternalShipWeightDetail = internalShipWeightDetail.stream().collect(Collectors.reducing((u, v) -> u.weightNoteBasicFigureAdd(v))).map(x -> x).orElse(null);
        WeightBasicFigure totalInternalWeightLossDetail = internalWeightLossDetail.stream().collect(Collectors.reducing((u, v) -> u.basicFigureAdd(v))).map(x -> x).orElse(null);
        
        return WeightNoteClaimAggegrate.builder()
            .shipWeightDetail(shipWeightDetail)
            .arrivalWeightDetail(arrivalWeightDetail)
            .weightLossDetail(weightLossDetail)
            .internalShipWeightDetail(internalShipWeightDetail)
            .internalWeightLossDetail(internalWeightLossDetail)
            
            .totalShipWeightDetail(totalShipWeightDetail)
            .totalArrivalWeightDetail(totalArrivalWeightDetail)
            .totalWeightLossDetail(totalWeightLossDetail)
            .totalInternalShipWeightDetail(totalInternalShipWeightDetail)
            .totalInternalWeightLossDetail(totalInternalWeightLossDetail)
            .diffBetweenRealAndClaim(totalWeightLossDetail.getNetWeight() - (claim.getDestinationFranchise() / 100) * totalShipWeightDetail.getNetWeight())
            .theoryFranchiseWeight((claim.getDestinationFranchise() / 100) * totalShipWeightDetail.getNetWeight())
            .build();
        
    }

    public Claim updateClaimApprovalStatus(String claimRef, ApprovalStatus status, User user) {
        Claim claim = findChildClaimByLocalRefNumber(claimRef);
        claim.setClaimStatus(status);
        claim.setClaimStatusUpdateDate(new Date());
        claim.setClaimStatusUpdateUser(user);
        return claim;
    }

    public void addSiCustomCost(SICustomCost cost) {
        this.shippingCost.addSiCustomCost(cost);
        registerEvent(new SICostUpdateObjectEvent(this));
    }

    public void removeSiCustomCost(String id) {
        this.shippingCost.removeCustomCost(id);
        registerEvent(new SICostUpdateObjectEvent(this));
    }

    public void initNewSelf(User user) {
        this.setDate(new Date());
        this.setUpdateCompletionDate(new Date());
        
        this.setUser(user);
        this.setStatus(Constants.PENDING);
        
        this.setRequestUser(user);
        this.setRequestDate(new Date());
        this.setRequestStatus(Constants.PENDING);
        this.setRequestStatusEnum(RequestStatus.PENDING);
        this.setCompletionStatusUser(null);
        
        this.setShipmentStatusEnum(CompletionStatus.PENDING);
        this.setCompletionStatus(CompletionStatus.PENDING);
        
        registerEvent(new SIUpdatedEvent(this.getRefNumber()));
    }
    
    public void initUpdateSelf(User user) {
    	setUser(user);
        registerEvent(new SIUpdatedEvent(this.getRefNumber()));
    }
    
    public void initUpdateSelfForAdmin() {
        registerEvent(new SIUpdatedEvent(this.getRefNumber()));
    }

    private SampleSent findChildSampleSenttByLocalRefNumber(String ssRef) {
        //System.out.println("size is:" + getSampleSents().size());
        return getSampleSents().stream().filter(ss -> ss.getRefNumber().equals(ssRef)).findAny().get();
    }

    private Claim findChildClaimByLocalRefNumber(String claimRef) {
        //System.out.println("size is:" + getSampleSents().size());
        return getClaims().stream().filter(claim -> claim.getRefNumber().equals(claimRef)).findAny().get();
    }

    public SampleSent updateSampleSentApprovalStatus(String ssRef, ApprovalStatus status, User user) {
        SampleSent ss = findChildSampleSenttByLocalRefNumber(ssRef);
        ss.setApprovalStatusEnum(status);
        ss.setSaveApprovalStatusDate(new Date());
        ss.setSaveApprovalStatusUser(user);
        registerEvent(new SIUpdatedEvent(this.getRefNumber()));
        registerEvent(new SSApprovalStatusUpdatedEvent(ssRef, status));
        return ss;
    }
    
    public SampleSent updateSampleSentSendingStatus(String ssRef, SendingStatus status, User user) {
        SampleSent ss = findChildSampleSenttByLocalRefNumber(ssRef);
        ss.setSendingStatusEnum(status);
        ss.setSaveSendingStatusDate(new Date());
        ss.setSaveSendingStatusUser(user);
        registerEvent(new SSSendingStatusUpdatedEvent(ssRef, status));
        return ss;
    }

}
