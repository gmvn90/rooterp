package com.swcommodities.wsmill.hibernate.dto;
// Generated Feb 18, 2014 3:38:53 PM by Hibernate Tools 3.2.1.GA

import static javax.persistence.GenerationType.IDENTITY;

import java.util.Date;
import java.util.Set;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.Transient;

import com.swcommodities.wsmill.hibernate.dto.contract.OwnerInstruction;
import com.swcommodities.wsmill.utils.Constants;

/**
 * DeliveryInstruction generated by hbm2java
 */
@Entity
@Table(name = "delivery_instruction")
public class DeliveryInstruction implements java.io.Serializable, OwnerInstruction {

    private Integer id;

    private User user;

    private CompanyMaster companyMasterByClientId;

    private CompanyMaster companyMasterByWeightControllerId;
    private CompanyMaster companyMasterBySupplierId;
    private CompanyMaster companyMasterByControllerId;
    private GradeMaster gradeMaster;
    private PackingMaster packingMaster;
    private CompanyMaster companyMasterByPledger;
    private Warehouse warehouse;
    private CompanyMaster companyMasterByQualityControllerId;
    private String refNumber;
    private String clientRef;

    private Date date;
    private String supplierRef;
    private Double tons = Double.parseDouble("0");
    private Float kgPerBag;
    private Integer noOfBags;
    private Date deliveryDate;
    private String fromTime;
    private String toTime;
    private String markingOnBags;
    private Integer originId;
    private Integer qualityId;
    private String remark;
    private Byte status = Constants.PENDING;
    private String log;
    private String supllierRef;
    private OriginMaster originMaster;
    private LocationCompany location;
    private LocationMaster locationMaster;
    private QualificationCompany qualificationCompany;
    private Date firstDate;
    private Date lastDate;
    private User userByRequestUserId;
    private User userByUpdateUserId;
    private Date updateDate;
    private Date requestDate;
    private Byte requestStatus;
    private Date userUpdateDate;
    private Set<WeightNote> weightNotes;
    private int deleteStatus = 2;
    private String requestRemark;
    private QualityMaster qualityMaster;
    private Boolean isCompletable;
    private Double deliverd;
    private Double pending;

    public DeliveryInstruction() {
    }

    @Id
    @GeneratedValue(strategy = IDENTITY)

    @Column(name = "id", unique = true, nullable = false)
    public Integer getId() {
        return this.id;
    }

    public void setId(Integer id) {
        this.id = id;
    }

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "user_id")
    public User getUser() {
        return this.user;
    }

    public void setUser(User user) {
        this.user = user;
    }

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "client_id")
    public CompanyMaster getCompanyMasterByClientId() {
        return this.companyMasterByClientId;
    }

    public void setCompanyMasterByClientId(CompanyMaster companyMasterByClientId) {
        this.companyMasterByClientId = companyMasterByClientId;
    }

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "weight_controller_id")
    public CompanyMaster getCompanyMasterByWeightControllerId() {
        return this.companyMasterByWeightControllerId;
    }

    public void setCompanyMasterByWeightControllerId(CompanyMaster companyMasterByWeightControllerId) {
        this.companyMasterByWeightControllerId = companyMasterByWeightControllerId;
    }

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "supplier_id")
    public CompanyMaster getCompanyMasterBySupplierId() {
        return this.companyMasterBySupplierId;
    }

    public void setCompanyMasterBySupplierId(CompanyMaster companyMasterBySupplierId) {
        this.companyMasterBySupplierId = companyMasterBySupplierId;
    }

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "controller_id")
    public CompanyMaster getCompanyMasterByControllerId() {
        return companyMasterByControllerId;
    }

    public DeliveryInstruction setCompanyMasterByControllerId(CompanyMaster companyMasterByControllerId) {
        this.companyMasterByControllerId = companyMasterByControllerId;
        return this;
    }

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "grade_id")
    public GradeMaster getGradeMaster() {
        return this.gradeMaster;
    }

    public void setGradeMaster(GradeMaster gradeMaster) {
        this.gradeMaster = gradeMaster;
    }

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "packing_id")
    public PackingMaster getPackingMaster() {
        return this.packingMaster;
    }

    public void setPackingMaster(PackingMaster packingMaster) {
        this.packingMaster = packingMaster;
    }

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "pledger")
    public CompanyMaster getCompanyMasterByPledger() {
        return this.companyMasterByPledger;
    }

    public void setCompanyMasterByPledger(CompanyMaster companyMasterByPledger) {
        this.companyMasterByPledger = companyMasterByPledger;
    }

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "warehouse_id")
    public Warehouse getWarehouse() {
        return this.warehouse;
    }

    public void setWarehouse(Warehouse warehouse) {
        this.warehouse = warehouse;
    }

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "quality_controller_id")
    public CompanyMaster getCompanyMasterByQualityControllerId() {
        return this.companyMasterByQualityControllerId;
    }

    public void setCompanyMasterByQualityControllerId(CompanyMaster companyMasterByQualityControllerId) {
        this.companyMasterByQualityControllerId = companyMasterByQualityControllerId;
    }

    @Column(name = "ref_number")
    public String getRefNumber() {
        return this.refNumber;
    }

    public void setRefNumber(String refNumber) {
        this.refNumber = refNumber;
    }

    @Column(name = "client_ref")
    public String getClientRef() {
        return this.clientRef;
    }

    public void setClientRef(String clientRef) {
        this.clientRef = clientRef;
    }

    @Temporal(TemporalType.DATE)
    @Column(name = "date", length = 10)
    public Date getDate() {
        return this.date;
    }

    //@JsonDeserialize(using = JsonDateDeserializer.class)
    public void setDate(Date date) {
        this.date = date;
    }

    @Column(name = "supplier_ref")
    public String getSupplierRef() {
        return this.supplierRef;
    }

    public void setSupplierRef(String supplierRef) {
        this.supplierRef = supplierRef;
    }

    @Column(name = "tons", precision = 22, scale = 0)
    public Double getTons() {
        return this.tons;
    }

    public void setTons(Double tons) {
        this.tons = tons;
    }

    @Column(name = "kg_per_bag", precision = 12, scale = 0)
    public Float getKgPerBag() {
        return this.kgPerBag;
    }

    public void setKgPerBag(Float kgPerBag) {
        this.kgPerBag = kgPerBag;
    }

    @Column(name = "no_of_bags")
    public Integer getNoOfBags() {
        return this.noOfBags;
    }

    public void setNoOfBags(Integer noOfBags) {
        this.noOfBags = noOfBags;
    }

    @Temporal(TemporalType.DATE)
    @Column(name = "delivery_date", length = 10)
    public Date getDeliveryDate() {
        return this.deliveryDate;
    }

    //@JsonDeserialize(using = JsonDateDeserializer.class)
    public void setDeliveryDate(Date deliveryDate) {
        this.deliveryDate = deliveryDate;
    }

    @Column(name = "from_time")
    public String getFromTime() {
        return this.fromTime;
    }

    public void setFromTime(String fromTime) {
        this.fromTime = fromTime;
    }

    @Column(name = "to_time")
    public String getToTime() {
        return this.toTime;
    }

    public void setToTime(String toTime) {
        this.toTime = toTime;
    }

    @Column(name = "marking_on_bags")
    public String getMarkingOnBags() {
        return this.markingOnBags;
    }

    public void setMarkingOnBags(String markingOnBags) {
        this.markingOnBags = markingOnBags;
    }

    @Column(name = "origin_id")
    public Integer getOriginId() {
        return this.originId;
    }

    public void setOriginId(Integer originId) {
        this.originId = originId;
    }

    @Column(name = "quality_id")
    public Integer getQualityId() {
        return this.qualityId;
    }

    public void setQualityId(Integer qualityId) {
        this.qualityId = qualityId;
    }

    @Column(name = "remark", length = 65535)
    public String getRemark() {
        return this.remark;
    }

    public void setRemark(String remark) {
        this.remark = remark;
    }

    @Column(name = "status")
    public Byte getStatus() {
        return this.status;
    }

    public void setStatus(Byte status) {
        this.status = status;
    }

    @Column(name = "log", length = 65535)
    public String getLog() {
        return this.log;
    }

    public void setLog(String log) {
        this.log = log;
    }

    @Column(name = "supllier_ref")
    public String getSupllierRef() {
        return this.supllierRef;
    }

    public void setSupllierRef(String supllierRef) {
        this.supllierRef = supllierRef;
    }

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "new_origin_id")
    public OriginMaster getOriginMaster() {
        return originMaster;
    }

    public DeliveryInstruction setOriginMaster(OriginMaster originMaster) {
        this.originMaster = originMaster;
        return this;
    }

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "location_id")
    public LocationCompany getLocation() {
        return location;
    }

    public DeliveryInstruction setLocation(LocationCompany location) {
        this.location = location;
        return this;
    }

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "location_master_id")
    public LocationMaster getLocationMaster() {
        return locationMaster;
    }

    public DeliveryInstruction setLocationMaster(LocationMaster locationMaster) {
        this.locationMaster = locationMaster;
        return this;
    }

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "qualification_company_id")
    public QualificationCompany getQualificationCompany() {
        return qualificationCompany;
    }

    public DeliveryInstruction setQualificationCompany(QualificationCompany qualificationCompany) {
        this.qualificationCompany = qualificationCompany;
        return this;
    }

    public Date getFirstDate() {
        return firstDate;
    }

    //@JsonDeserialize(using = JsonDateDeserializer.class)
    public DeliveryInstruction setFirstDate(Date firstDate) {
        this.firstDate = firstDate;
        return this;
    }

    public Date getLastDate() {
        return lastDate;
    }

    //@JsonDeserialize(using = JsonDateDeserializer.class)
    public DeliveryInstruction setLastDate(Date lastDate) {
        this.lastDate = lastDate;
        return this;
    }

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "request_user_id")
    public User getUserByRequestUserId() {
        return userByRequestUserId;
    }

    public DeliveryInstruction setUserByRequestUserId(User userByRequestUserId) {
        this.userByRequestUserId = userByRequestUserId;
        return this;
    }

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "update_user_id")
    public User getUserByUpdateUserId() {
        return userByUpdateUserId;
    }

    public DeliveryInstruction setUserByUpdateUserId(User userByUpdateUserId) {
        this.userByUpdateUserId = userByUpdateUserId;
        return this;
    }

    public Date getUpdateDate() {
        return updateDate;
    }

    //@JsonDeserialize(using = JsonDateDeserializer.class)
    public DeliveryInstruction setUpdateDate(Date updateDate) {
        this.updateDate = updateDate;
        return this;
    }

    public Date getRequestDate() {
        return requestDate;
    }

    //@JsonDeserialize(using = JsonDateDeserializer.class)
    public DeliveryInstruction setRequestDate(Date requestDate) {
        this.requestDate = requestDate;
        return this;
    }

    public Byte getRequestStatus() {
        return requestStatus;
    }

    public DeliveryInstruction setRequestStatus(Byte requestStatus) {
        this.requestStatus = requestStatus;
        return this;
    }

    public Date getUserUpdateDate() {
        return userUpdateDate;
    }

    //@JsonDeserialize(using = JsonDateDeserializer.class)
    public DeliveryInstruction setUserUpdateDate(Date userUpdateDate) {
        this.userUpdateDate = userUpdateDate;
        return this;
    }

    @OneToMany(fetch = FetchType.LAZY, mappedBy = "deliveryInstruction")
    public Set<WeightNote> getWeightNotes() {
        return weightNotes;
    }

    public DeliveryInstruction setWeightNotes(Set<WeightNote> weightNotes) {
        this.weightNotes = weightNotes;
        return this;
    }

    public DeliveryInstruction addWeightNote(WeightNote w) {
        this.weightNotes.add(w);
        return this;
    }

    public void calculateInfo() {
//        double kg = 0;
//        List<WeightNoteReceipt> notes = new ArrayList<>();
//        Set<WeightNote> weightNotes = getWeightNotes();
//        if(weightNotes != null) {
//
//            for (WeightNote w : weightNotes) {
//                if (w.getStatus() != Constants.DELETED) {
//                    for (WeightNoteReceipt weightNoteReceipt : w.getWeightNoteReceipts()) {
//                        if (weightNoteReceipt.getStatus() != Constants.DELETED) {
//                            notes.add(weightNoteReceipt);
//                        }
//                    }
//                }
//            }
//            for (WeightNoteReceipt w : notes) {
//                kg += w.getGrossWeight() - w.getTareWeight();
//            }
//            System.out.println("kg " + kg);
//            deliverd = (double) Math.round(kg * 10.0) / 10000d;
//            System.out.println("deliverd " + deliverd);
//            if (deliverd == null) {
//                pending = tons;
//            } else {
//                if (tons == null) {
//                    pending = 0 - deliverd;
//                } else {
//                    pending = tons - deliverd;
//                }
//
//            }
//        }
    }

    @Column(name = "request_remark", length = 65535)
    public String getRequestRemark() {
        return requestRemark;
    }

    public DeliveryInstruction setRequestRemark(String requestRemark) {
        this.requestRemark = requestRemark;
        return this;
    }

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "new_quality_id")
    public QualityMaster getQualityMaster() {
        return qualityMaster;
    }

    public DeliveryInstruction setQualityMaster(QualityMaster qualityMaster) {
        this.qualityMaster = qualityMaster;
        return this;
    }

    public int getDeleteStatus() {
        return deleteStatus;
    }

    public DeliveryInstruction setDeleteStatus(int deleteStatus) {
        this.deleteStatus = deleteStatus;
        return this;
    }

    public Double getDeliverd() {

//        System.out.println("****** " + status);
//        if(deliverd == null || status == null || status != Constants.COMPLETE) {
//            calculateInfo();
//        }
        if (deliverd == null) {
            return 0.0;
        }
        return deliverd;
        //return Double.parseDouble("0");
    }

    public DeliveryInstruction setDeliverd(Double deliverd) {
        this.deliverd = deliverd;
        return this;
    }

    public Double getPending() {
//        if(deliverd == null || status == null || status != Constants.COMPLETE) {
//            calculateInfo();
//        }
        if (tons == null) {
            return 0.0;
        }
        return tons - getDeliverd();
        //return Double.parseDouble("0");
    }

    public DeliveryInstruction setPending(Double pending) {
        this.pending = pending;
        return this;
    }

    @Transient
    public Boolean getCompletable() {
        Boolean completable = true;
        if (getWeightNotes() != null) {
            Set<WeightNote> wns = getWeightNotes();
            if (wns.size() != 0) {
                for (WeightNote wn : wns) {
                    if (wn.getStatus().equals(Constants.PENDING)) {
                        completable = false;
                    }
                }
            }
        }
        return completable;
    }

    public DeliveryInstruction setCompletable(Boolean completable) {
        isCompletable = completable;
        return this;
    }
}
