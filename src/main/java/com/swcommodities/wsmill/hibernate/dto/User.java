package com.swcommodities.wsmill.hibernate.dto;
// Generated Feb 18, 2014 3:38:53 PM by Hibernate Tools 3.2.1.GA

import static javax.persistence.GenerationType.IDENTITY;

import java.util.Date;
import java.util.HashSet;
import java.util.Set;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.ManyToMany;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

/**
 * User generated by hbm2java
 */
@Entity
@Table(name = "user")
public class User implements java.io.Serializable {

    private Integer id;
    private String userName;
    private String password;
    private String fullName;
    private String phone;
    private String address;
    private String email;
    private Integer country;
    private Integer company;
    private Date dob;
    private Date lastLogin;
    private String log;
    private boolean active;
    private boolean isOnlyForClientSite;
    private String extras;
    private Set<CompanyMaster> companyMasters = new HashSet<CompanyMaster>(0);
    private Set<Authorization> authorizations = new HashSet<Authorization>(0);

    public User() {
    }

    public User(Integer id) {
        this.id = id;
    }
    
    public User(String userName, String password, boolean active) {
        this.userName = userName;
        this.password = password;
        this.active = active;
    }
    
    public static User fromIdAndUserName(int id, String userName) {
    		User user = new User(id);
    		user.setUserName(userName);
    		return user;
    }

    public User(String userName, String password, String fullName, String phone, String address, String email, Integer country, Integer company, Date dob, Date lastLogin, String log, boolean active, String extras, Set<WeightNote> weightNotes, Set<QualityReport> qualityReports, Set<WarehouseReceipt> warehouseReceipts, Set<ProcessingInstruction> processingInstructions, Set<CompanyMaster> companyMasters, Set<WnrAllocation> wnrAllocationsForWeightOutUser, Set<ShippingInstruction> shippingInstructions, Set<WnrAllocation> wnrAllocationsForAllocatedUser, Set<WarehouseMap> warehouseMaps, Set<Movement> movements, Set<DeliveryInstruction> deliveryInstructions, Set<Authorization> authorizations, Set<ShippingAdvice> shippingAdvices) {
        this.userName = userName;
        this.password = password;
        this.fullName = fullName;
        this.phone = phone;
        this.address = address;
        this.email = email;
        this.country = country;
        this.company = company;
        this.dob = dob;
        this.lastLogin = lastLogin;
        this.log = log;
        this.active = active;
        this.extras = extras;
        this.companyMasters = companyMasters;
        this.authorizations = authorizations;
    }

    @Id
    @GeneratedValue(strategy = IDENTITY)

    @Column(name = "id", unique = true, nullable = false)
    public Integer getId() {
        return this.id;
    }

    public void setId(Integer id) {
        this.id = id;
    }

    @Column(name = "user_name", nullable = false)
    public String getUserName() {
        return this.userName;
    }

    public void setUserName(String userName) {
        this.userName = userName;
    }

    @Column(name = "password", nullable = false)
    public String getPassword() {
        return this.password;
    }

    public void setPassword(String password) {
        this.password = password;
    }

    @Column(name = "full_name")
    public String getFullName() {
        return this.fullName;
    }

    public void setFullName(String fullName) {
        this.fullName = fullName;
    }

    @Column(name = "phone", length = 65535)
    public String getPhone() {
        return this.phone;
    }

    public void setPhone(String phone) {
        this.phone = phone;
    }

    @Column(name = "address", length = 65535)
    public String getAddress() {
        return this.address;
    }

    public void setAddress(String address) {
        this.address = address;
    }

    @Column(name = "email")
    public String getEmail() {
        return this.email;
    }

    public void setEmail(String email) {
        this.email = email;
    }

    @Column(name = "country")
    public Integer getCountry() {
        return this.country;
    }

    public void setCountry(Integer country) {
        this.country = country;
    }

    @Column(name = "company")
    public Integer getCompany() {
        return this.company;
    }

    public void setCompany(Integer company) {
        this.company = company;
    }

    @Temporal(TemporalType.DATE)
    @Column(name = "dob", length = 10)
    public Date getDob() {
        return this.dob;
    }

    public void setDob(Date dob) {
        this.dob = dob;
    }

    @Temporal(TemporalType.TIMESTAMP)
    @Column(name = "last_login", length = 19)
    public Date getLastLogin() {
        return this.lastLogin;
    }

    public void setLastLogin(Date lastLogin) {
        this.lastLogin = lastLogin;
    }

    @Column(name = "log")
    public String getLog() {
        return this.log;
    }

    public void setLog(String log) {
        this.log = log;
    }

    @Column(name = "active", nullable = false)
    public boolean isActive() {
        return this.active;
    }

    public void setActive(boolean active) {
        this.active = active;
    }

    @Column(name = "extras")
    public String getExtras() {
        return this.extras;
    }

    public void setExtras(String extras) {
        this.extras = extras;
    }

    @ManyToMany(cascade = CascadeType.ALL, fetch = FetchType.LAZY)
    @JoinTable(name = "client_user", joinColumns = {
        @JoinColumn(name = "user_id", nullable = false, updatable = false)}, inverseJoinColumns = {
        @JoinColumn(name = "client_id", nullable = false, updatable = false)})
    public Set<CompanyMaster> getCompanyMasters() {
        return this.companyMasters;
    }

    public void setCompanyMasters(Set<CompanyMaster> companyMasters) {
        this.companyMasters = companyMasters;
    }

    @OneToMany(cascade = CascadeType.ALL, fetch = FetchType.LAZY, mappedBy = "user")
    public Set<Authorization> getAuthorizations() {
        return this.authorizations;
    }

    public void setAuthorizations(Set<Authorization> authorizations) {
        this.authorizations = authorizations;
    }

    @Column(name = "isOnlyForClientSite", nullable = false)
    public boolean isOnlyForClientSite() {
        return isOnlyForClientSite;
    }

    public void setOnlyForClientSite(boolean onlyForClientSite) {
        isOnlyForClientSite = onlyForClientSite;
    }
}
