package com.swcommodities.wsmill.hibernate.dto;
// Generated Feb 18, 2014 3:38:53 PM by Hibernate Tools 3.2.1.GA

import com.swcommodities.wsmill.utils.Common;
import com.swcommodities.wsmill.utils.Constants;
import static javax.persistence.GenerationType.IDENTITY;

import java.util.Date;
import java.util.HashSet;
import java.util.Set;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.ManyToMany;
import javax.persistence.ManyToOne;
import javax.persistence.OneToOne;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.Transient;

/**
 * WeightNoteReceipt generated by hbm2java
 */
@Entity
@Table(name = "weight_note_receipt")
public class WeightNoteReceipt implements java.io.Serializable {

    private Integer id;
    private CompanyMaster companyMasterByPledgeId;
    private CompanyMaster companyMasterByClientId;
    private WarehouseCell warehouseCell;
    private GradeMaster gradeMaster;
    private WeightNote weightNote;
    private PackingMaster packingMaster;
    private String refNumber;
    private Date date;
    private Integer noOfBags;
    private Float grossWeight;
    private Float tareWeight;
    private String palletName;
    private Float palletWeight;
    private String log;
    private Byte status;
    private String options;
    private WnrAllocation wnrAllocationsForWnrId;
    private Set<Movement> movements = new HashSet<Movement>(0);
    private Set<Movement> movements_1 = new HashSet<Movement>(0);
    private WnrAllocation wnrAllocationsForOutWnrId;

    public WeightNoteReceipt() {
    }
    
    public WeightNoteReceipt(float grossWeight, float tareWeight) {
        this.grossWeight = grossWeight;
        this.tareWeight = tareWeight;
        this.status = Constants.AVAILABLE;
    }

    public WeightNoteReceipt(CompanyMaster companyMasterByPledgeId, CompanyMaster companyMasterByClientId, WarehouseCell warehouseCell, GradeMaster gradeMaster, WeightNote weightNote, PackingMaster packingMaster, String refNumber, Date date, Integer noOfBags, Float grossWeight, Float tareWeight, String palletName, Float palletWeight, String log, Byte status, String options, WnrAllocation wnrAllocationsForWnrId, Set<Movement> movements, Set<Movement> movements_1, WnrAllocation wnrAllocationsForOutWnrId) {
        this.companyMasterByPledgeId = companyMasterByPledgeId;
        this.companyMasterByClientId = companyMasterByClientId;
        this.warehouseCell = warehouseCell;
        this.gradeMaster = gradeMaster;
        this.weightNote = weightNote;
        this.packingMaster = packingMaster;
        this.refNumber = refNumber;
        this.date = date;
        this.noOfBags = noOfBags;
        this.grossWeight = grossWeight;
        this.tareWeight = tareWeight;
        this.palletName = palletName;
        this.palletWeight = palletWeight;
        this.log = log;
        this.status = status;
        this.options = options;
        this.wnrAllocationsForWnrId = wnrAllocationsForWnrId;
        this.movements = movements;
        this.movements_1 = movements_1;
        this.wnrAllocationsForOutWnrId = wnrAllocationsForOutWnrId;
    }

    @Id
    @GeneratedValue(strategy = IDENTITY)

    @Column(name = "id", unique = true, nullable = false)
    public Integer getId() {
        return this.id;
    }

    public void setId(Integer id) {
        this.id = id;
    }

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "pledge_id")
    public CompanyMaster getCompanyMasterByPledgeId() {
        return this.companyMasterByPledgeId;
    }

    public void setCompanyMasterByPledgeId(CompanyMaster companyMasterByPledgeId) {
        this.companyMasterByPledgeId = companyMasterByPledgeId;
    }

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "client_id")
    public CompanyMaster getCompanyMasterByClientId() {
        return this.companyMasterByClientId;
    }

    public void setCompanyMasterByClientId(CompanyMaster companyMasterByClientId) {
        this.companyMasterByClientId = companyMasterByClientId;
    }

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "area_id")
    public WarehouseCell getWarehouseCell() {
        return this.warehouseCell;
    }

    public void setWarehouseCell(WarehouseCell warehouseCell) {
        this.warehouseCell = warehouseCell;
    }

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "grade_id")
    public GradeMaster getGradeMaster() {
        return this.gradeMaster;
    }

    public void setGradeMaster(GradeMaster gradeMaster) {
        this.gradeMaster = gradeMaster;
    }

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "wn_id")
    public WeightNote getWeightNote() {
        return this.weightNote;
    }

    public void setWeightNote(WeightNote weightNote) {
        this.weightNote = weightNote;
    }

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "packing_id")
    public PackingMaster getPackingMaster() {
        return this.packingMaster;
    }

    public void setPackingMaster(PackingMaster packingMaster) {
        this.packingMaster = packingMaster;
    }

    @Column(name = "ref_number")
    public String getRefNumber() {
        return this.refNumber;
    }

    public void setRefNumber(String refNumber) {
        this.refNumber = refNumber;
    }

    @Temporal(TemporalType.TIMESTAMP)
    @Column(name = "date", length = 19)
    public Date getDate() {
        return this.date;
    }

    public void setDate(Date date) {
        this.date = date;
    }

    @Column(name = "no_of_bags")
    public Integer getNoOfBags() {
        return this.noOfBags;
    }

    public void setNoOfBags(Integer noOfBags) {
        this.noOfBags = noOfBags;
    }

    @Column(name = "gross_weight", precision = 9, scale = 3)
    public Float getGrossWeight() {
        return this.grossWeight;
    }

    public void setGrossWeight(Float grossWeight) {
        this.grossWeight = grossWeight;
    }

    @Column(name = "tare_weight", precision = 9, scale = 3)
    public Float getTareWeight() {
        return this.tareWeight;
    }

    public void setTareWeight(Float tareWeight) {
        this.tareWeight = tareWeight;
    }

    @Column(name = "pallet_name")
    public String getPalletName() {
        return this.palletName;
    }

    public void setPalletName(String palletName) {
        this.palletName = palletName;
    }

    @Column(name = "pallet_weight", precision = 12, scale = 0)
    public Float getPalletWeight() {
        return this.palletWeight;
    }

    public void setPalletWeight(Float palletWeight) {
        this.palletWeight = palletWeight;
    }

    @Column(name = "log", length = 65535)
    public String getLog() {
        return this.log;
    }

    public void setLog(String log) {
        this.log = log;
    }

    @Column(name = "status")
    public Byte getStatus() {
        return this.status;
    }

    public void setStatus(Byte status) {
        this.status = status;
    }

    @Column(name = "options", length = 65535)
    public String getOptions() {
        return this.options;
    }

    public void setOptions(String options) {
        this.options = options;
    }

    @OneToOne(cascade = CascadeType.ALL, fetch = FetchType.LAZY, mappedBy = "weightNoteReceiptByWnrId")
    public WnrAllocation getWnrAllocationsForWnrId() {
        return this.wnrAllocationsForWnrId;
    }

    public void setWnrAllocationsForWnrId(WnrAllocation wnrAllocationsForWnrId) {
        this.wnrAllocationsForWnrId = wnrAllocationsForWnrId;
    }

    @ManyToMany(cascade = CascadeType.ALL, fetch = FetchType.LAZY)
    @JoinTable(name = "wnr_movement", joinColumns = {
        @JoinColumn(name = "wnr_id", nullable = false, updatable = false)}, inverseJoinColumns = {
        @JoinColumn(name = "movement_id", nullable = false, updatable = false)})
    public Set<Movement> getMovements() {
        return this.movements;
    }

    public void setMovements(Set<Movement> movements) {
        this.movements = movements;
    }

    @ManyToMany(cascade = CascadeType.ALL, fetch = FetchType.LAZY)
    @JoinTable(name = "wnr_movement", joinColumns = {
        @JoinColumn(name = "wnr_id", nullable = false, updatable = false)}, inverseJoinColumns = {
        @JoinColumn(name = "movement_id", nullable = false, updatable = false)})
    public Set<Movement> getMovements_1() {
        return this.movements_1;
    }

    public void setMovements_1(Set<Movement> movements_1) {
        this.movements_1 = movements_1;
    }

    @OneToOne(cascade = CascadeType.ALL, fetch = FetchType.LAZY, mappedBy = "weightNoteReceiptByOutWnrId")
    public WnrAllocation getWnrAllocationsForOutWnrId() {
        return this.wnrAllocationsForOutWnrId;
    }

    public void setWnrAllocationsForOutWnrId(WnrAllocation wnrAllocationsForOutWnrId) {
        this.wnrAllocationsForOutWnrId = wnrAllocationsForOutWnrId;
    }

    @Transient
    public boolean getIsDeleted() {
        return Byte.valueOf("2").equals(status);
    }
    
    @Transient
    public boolean isAvailable() {
        return status.equals(Constants.AVAILABLE);
    }
    
    @Transient
    public boolean isAllocated() {
        return status.equals(Constants.ALLOCATED);
    }
    
    public void allocated(User user) {
        this.setStatus(Constants.ALLOCATED);
                    //set Log
        String[] arr1 = {"type", "user", "date"};
        String[] arr2 = {"allocate", user.getUserName(), Common.getDateValue(new Date(), Common.date_format)};
        String log = (getLog() != null) ? this.getLog() + "," + Common.generateJsonString(arr1, arr2) : Common.generateJsonString(arr1, arr2);
        this.setLog(log);
    }
    
    
}
