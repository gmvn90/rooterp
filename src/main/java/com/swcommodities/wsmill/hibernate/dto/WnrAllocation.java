package com.swcommodities.wsmill.hibernate.dto;
// Generated Feb 18, 2014 3:38:53 PM by Hibernate Tools 3.2.1.GA

import com.swcommodities.wsmill.utils.Constants;
import static javax.persistence.GenerationType.IDENTITY;

import java.util.Date;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.ManyToOne;
import javax.persistence.OneToOne;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.Transient;

/**
 * WnrAllocation generated by hbm2java
 */
@Entity
@Table(name = "wnr_allocation")
public class WnrAllocation implements java.io.Serializable {

    private Integer id;
    private User userByAllocatedUser;
    private User userByWeightOutUser;
    private WeightNoteReceipt weightNoteReceiptByOutWnrId;
    private WeightNoteReceipt weightNoteReceiptByWnrId;
    private Integer instId;
    private String instType;
    private Integer wnId;
    private Date allocatedDate;
    private Byte status;
    private Date dateOut;
    private Float weightOut;
    private String log;
    private ProcessingInstruction processingInstruction;
    private ShippingInstruction shippingInstruction;

    public WnrAllocation() {
    }

    public WnrAllocation(User userByAllocatedUser, User userByWeightOutUser, WeightNoteReceipt weightNoteReceiptByOutWnrId, WeightNoteReceipt weightNoteReceiptByWnrId, Integer instId, String instType, Integer wnId, Date allocatedDate, Byte status, Date dateOut, Float weightOut, String log) {
        this.userByAllocatedUser = userByAllocatedUser;
        this.userByWeightOutUser = userByWeightOutUser;
        this.weightNoteReceiptByOutWnrId = weightNoteReceiptByOutWnrId;
        this.weightNoteReceiptByWnrId = weightNoteReceiptByWnrId;
        this.instId = instId;
        this.instType = instType;
        this.wnId = wnId;
        this.allocatedDate = allocatedDate;
        this.status = status;
        this.dateOut = dateOut;
        this.weightOut = weightOut;
        this.log = log;
    }
    
    public WnrAllocation(WeightNoteReceipt wnr, User user, String log, ShippingInstruction shippingInstruction) {
        this.instId = shippingInstruction.getId();
        this.allocatedDate = new Date();
        this.weightNoteReceiptByWnrId = wnr;
        this.instType = "E"; // export
        this.userByAllocatedUser = user;
        this.wnId = wnr.getWeightNote().getId();
        this.status = Constants.PENDING;
        this.shippingInstruction = shippingInstruction;
        this.log = log;
    }
    
    public WnrAllocation(WeightNoteReceipt wnr, User user, String log, ProcessingInstruction processingInstruction) {
        this.instId = processingInstruction.getId();
        this.allocatedDate = new Date();
        this.weightNoteReceiptByWnrId = wnr;
        this.instType = "P"; // processing
        this.userByAllocatedUser = user;
        this.wnId = wnr.getWeightNote().getId();
        this.status = Constants.PENDING;
        this.processingInstruction = processingInstruction;
        this.log = log;
    }
    
    @Id
    @GeneratedValue(strategy = IDENTITY)
    @Column(name = "id", unique = true, nullable = false)
    public Integer getId() {
        return this.id;
    }

    public void setId(Integer id) {
        this.id = id;
    }

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "allocated_user")
    public User getUserByAllocatedUser() {
        return this.userByAllocatedUser;
    }

    public void setUserByAllocatedUser(User userByAllocatedUser) {
        this.userByAllocatedUser = userByAllocatedUser;
    }

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "weight_out_user")
    public User getUserByWeightOutUser() {
        return this.userByWeightOutUser;
    }

    public void setUserByWeightOutUser(User userByWeightOutUser) {
        this.userByWeightOutUser = userByWeightOutUser;
    }

    @OneToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "out_wnr_id")
    public WeightNoteReceipt getWeightNoteReceiptByOutWnrId() {
        return this.weightNoteReceiptByOutWnrId;
    }

    public void setWeightNoteReceiptByOutWnrId(WeightNoteReceipt weightNoteReceiptByOutWnrId) {
        this.weightNoteReceiptByOutWnrId = weightNoteReceiptByOutWnrId;
    }

    @OneToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "wnr_id")
    public WeightNoteReceipt getWeightNoteReceiptByWnrId() {
        return this.weightNoteReceiptByWnrId;
    }

    public void setWeightNoteReceiptByWnrId(WeightNoteReceipt weightNoteReceiptByWnrId) {
        this.weightNoteReceiptByWnrId = weightNoteReceiptByWnrId;
    }

    @Column(name = "inst_id")
    public Integer getInstId() {
        return this.instId;
    }

    public void setInstId(Integer instId) {
        this.instId = instId;
    }

    @Column(name = "inst_type", length = 50)
    public String getInstType() {
        return this.instType;
    }

    public void setInstType(String instType) {
        this.instType = instType;
    }

    @Column(name = "wn_id")
    public Integer getWnId() {
        return this.wnId;
    }

    public void setWnId(Integer wnId) {
        this.wnId = wnId;
    }

    @Temporal(TemporalType.TIMESTAMP)
    @Column(name = "allocated_date", length = 19)
    public Date getAllocatedDate() {
        return this.allocatedDate;
    }

    public void setAllocatedDate(Date allocatedDate) {
        this.allocatedDate = allocatedDate;
    }

    @Column(name = "status")
    public Byte getStatus() {
        return this.status;
    }

    public void setStatus(Byte status) {
        this.status = status;
    }

    @Temporal(TemporalType.TIMESTAMP)
    @Column(name = "date_out", length = 19)
    public Date getDateOut() {
        return this.dateOut;
    }

    public void setDateOut(Date dateOut) {
        this.dateOut = dateOut;
    }

    @Column(name = "weight_out", precision = 9, scale = 3)
    public Float getWeightOut() {
        return this.weightOut;
    }

    public void setWeightOut(Float weightOut) {
        this.weightOut = weightOut;
    }

    @Column(name = "log", length = 65535)
    public String getLog() {
        return this.log;
    }

    public void setLog(String log) {
        this.log = log;
    }

    @ManyToOne
    @JoinTable(
        name = "processing_instruction_wnr_allocation",
        joinColumns = @JoinColumn(name = "wnr_allocation_id"),
        inverseJoinColumns = @JoinColumn(name = "processing_instruction_id")
    )
    public ProcessingInstruction getProcessingInstruction() {
        return processingInstruction;
    }

    public void setProcessingInstruction(ProcessingInstruction processingInstruction) {
        this.processingInstruction = processingInstruction;
    }

    @ManyToOne
    @JoinTable(
        name = "shipping_instruction_wnr_allocation",
        joinColumns = @JoinColumn(name = "wnr_allocation_id"),
        inverseJoinColumns = @JoinColumn(name = "shipping_instruction_id")
    )
    public ShippingInstruction getShippingInstruction() {
        return shippingInstruction;
    }

    public WnrAllocation setShippingInstruction(ShippingInstruction shippingInstruction) {
        this.shippingInstruction = shippingInstruction;
        return this;
    }
    
    @Transient
    public boolean isPending() {
        return this.status.equals(Constants.PENDING);
    }
}
