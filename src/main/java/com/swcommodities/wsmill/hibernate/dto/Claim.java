package com.swcommodities.wsmill.hibernate.dto;
// Generated Feb 18, 2014 3:38:53 PM by Hibernate Tools 3.2.1.GA

import com.swcommodities.wsmill.domain.model.ClaimWeightNote;
import java.util.Date;

import javax.persistence.CollectionTable;
import javax.persistence.Column;
import javax.persistence.ElementCollection;
import javax.persistence.Entity;
import javax.persistence.EnumType;
import javax.persistence.Enumerated;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.Table;

import com.swcommodities.wsmill.domain.model.status.ApprovalStatus;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.Set;
import java.util.TreeSet;
import javax.persistence.CascadeType;
import javax.persistence.JoinTable;
import javax.persistence.MapKey;
import javax.persistence.MapKeyColumn;
import javax.persistence.OneToMany;
import lombok.Data;

/**
 * ShippingInstruction generated by hbm2java
 */
@Entity
@Table(name = "claim")
@Data
public class Claim extends AbstractTimestampEntity implements java.io.Serializable   {

    @Id
    @GeneratedValue(strategy = GenerationType.AUTO)
    private Integer id;
    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "siId")
    private ShippingInstruction shippingInstructionBySiId;
    @Column(name = "refNumber", unique = true)
    private String refNumber;
    private String debitNote;
    private Date debitNoteDate;
    @ManyToOne(fetch = FetchType.LAZY)
    private User createdUser;
    @ManyToOne(fetch = FetchType.LAZY)
    private User claimStatusUpdateUser;
    private Date claimStatusUpdateDate;
    @Enumerated(EnumType.STRING)
    private ApprovalStatus claimStatus = ApprovalStatus.PENDING;
    @ManyToOne(fetch = FetchType.LAZY)
    private WarehouseMaster swornWeigher;
    @ManyToOne(fetch = FetchType.LAZY)
    private WarehouseMaster warehouse;
    private Date landingDate;
    private Date firstDateOfWeighing;
    private Date samplingDate;
    private Float contractFranchise = 0F;
    private Date finalDateOfWeighing;
    private String unloadingMethod;
    private Float destinationFranchise = 0F;
    @Column(columnDefinition = "TEXT")
    private String remark;
    
    @ElementCollection
    @CollectionTable(name = "claim_weight_note")
    @MapKeyColumn(name = "claim")
    // claim map represents the claim made by customer
    private Map<Integer, ClaimWeightNote> claimWeightNotes = new HashMap<>();
    
    @OneToMany(cascade = CascadeType.PERSIST, fetch = FetchType.EAGER)
    @JoinTable(
            name = "claim_document_files",
            joinColumns = @JoinColumn(name = "claim_id"),
            inverseJoinColumns = @JoinColumn(name = "file_id")
    )
    private Set<FileSent> documents = new TreeSet<>();
    
    @ManyToOne
    private User updatedArrivalWeightNoteUser;
    private Date updateArrivalWeightNoteDate;
    
    public Claim() {
    }

    public Claim setInitialInfo(String refNumber, User user) {
        this.refNumber = refNumber;
        this.id = null;
        this.createdUser = user;
        this.claimStatus = ApprovalStatus.PENDING;
        return this;
    }
    
    public Claim updateUpdateArrivalWeightNoteInfo(User user) {
        this.updatedArrivalWeightNoteUser = user;
        this.updateArrivalWeightNoteDate = new Date();
        return this;
    }

    public Claim(Integer id) {
    	this.id = id;
    }

    public Integer getId() {
        return this.id;
    }

    public void setId(Integer id) {
        this.id = id;
    }

    public void addClaimWeightNote(ClaimWeightNote claimWeightNote) {
        this.claimWeightNotes.put(claimWeightNote.getWeightNoteId(), claimWeightNote);
    }

    public void updateTimeAndUser(User user) {
        this.createdUser = user;
    }
    
    public String findApprovalStatusUsername() {
        return Optional.ofNullable(claimStatusUpdateUser).map(u -> u.getUserName()).orElse("");
    }
    
    public void addDocument(FileSent doc) {
        this.documents.add(doc);
    }
        
}
